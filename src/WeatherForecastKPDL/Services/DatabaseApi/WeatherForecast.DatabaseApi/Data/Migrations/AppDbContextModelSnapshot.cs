// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherForecast.DatabaseApi.Data;

#nullable disable

namespace WeatherForecast.DatabaseApi.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("WeatherForecast.DatabaseApi.Entities.Astro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MoonIllumination")
                        .HasColumnType("int");

                    b.Property<string>("MoonPhase")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Moonrise")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Moonset")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Sunrise")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Sunset")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("WeatherForecastId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeatherForecastId")
                        .IsUnique();

                    b.ToTable("Astros");
                });

            modelBuilder.Entity("WeatherForecast.DatabaseApi.Entities.DailyAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageHumidity")
                        .HasColumnType("double");

                    b.Property<double>("AveragePressure")
                        .HasColumnType("double");

                    b.Property<double>("AverageTemperature")
                        .HasColumnType("double");

                    b.Property<double>("AverageWindSpeed")
                        .HasColumnType("double");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("TotalPrecipitation")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.ToTable("DailyAnalyses");
                });

            modelBuilder.Entity("WeatherForecast.DatabaseApi.Entities.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Avghumidity")
                        .HasColumnType("int");

                    b.Property<double>("AvgtempC")
                        .HasColumnType("double");

                    b.Property<double>("AvgtempF")
                        .HasColumnType("double");

                    b.Property<double>("AvgvisKm")
                        .HasColumnType("double");

                    b.Property<double>("AvgvisMiles")
                        .HasColumnType("double");

                    b.Property<int>("ConditionCode")
                        .HasColumnType("int");

                    b.Property<string>("ConditionIcon")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ConditionText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("DailyChanceOfRain")
                        .HasColumnType("int");

                    b.Property<int>("DailyChanceOfSnow")
                        .HasColumnType("int");

                    b.Property<int>("DailyWillItRain")
                        .HasColumnType("int");

                    b.Property<int>("DailyWillItSnow")
                        .HasColumnType("int");

                    b.Property<double>("MaxtempC")
                        .HasColumnType("double");

                    b.Property<double>("MaxtempF")
                        .HasColumnType("double");

                    b.Property<double>("MaxwindKph")
                        .HasColumnType("double");

                    b.Property<double>("MaxwindMph")
                        .HasColumnType("double");

                    b.Property<double>("MintempC")
                        .HasColumnType("double");

                    b.Property<double>("MintempF")
                        .HasColumnType("double");

                    b.Property<double>("TotalprecipIn")
                        .HasColumnType("double");

                    b.Property<double>("TotalprecipMm")
                        .HasColumnType("double");

                    b.Property<double>("TotalsnowCm")
                        .HasColumnType("double");

                    b.Property<double>("Uv")
                        .HasColumnType("double");

                    b.Property<int>("WeatherForecastId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeatherForecastId")
                        .IsUnique();

                    b.ToTable("Days");
                });

            modelBuilder.Entity("WeatherForecast.DatabaseApi.Entities.Hour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChanceOfRain")
                        .HasColumnType("int");

                    b.Property<int>("ChanceOfSnow")
                        .HasColumnType("int");

                    b.Property<int>("Cloud")
                        .HasColumnType("int");

                    b.Property<int>("ConditionCode")
                        .HasColumnType("int");

                    b.Property<string>("ConditionIcon")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ConditionText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<double>("DewpointC")
                        .HasColumnType("double");

                    b.Property<double>("DewpointF")
                        .HasColumnType("double");

                    b.Property<double>("FeelslikeC")
                        .HasColumnType("double");

                    b.Property<double>("FeelslikeF")
                        .HasColumnType("double");

                    b.Property<double>("GustKph")
                        .HasColumnType("double");

                    b.Property<double>("GustMph")
                        .HasColumnType("double");

                    b.Property<double>("HeatindexC")
                        .HasColumnType("double");

                    b.Property<double>("HeatindexF")
                        .HasColumnType("double");

                    b.Property<int>("Humidity")
                        .HasColumnType("int");

                    b.Property<int>("IsDay")
                        .HasColumnType("int");

                    b.Property<double>("PrecipIn")
                        .HasColumnType("double");

                    b.Property<double>("PrecipMm")
                        .HasColumnType("double");

                    b.Property<double>("PressureIn")
                        .HasColumnType("double");

                    b.Property<double>("PressureMb")
                        .HasColumnType("double");

                    b.Property<double>("SnowCm")
                        .HasColumnType("double");

                    b.Property<double>("TempC")
                        .HasColumnType("double");

                    b.Property<double>("TempF")
                        .HasColumnType("double");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("TimeEpoch")
                        .HasColumnType("bigint");

                    b.Property<double>("Uv")
                        .HasColumnType("double");

                    b.Property<double>("VisKm")
                        .HasColumnType("double");

                    b.Property<double>("VisMiles")
                        .HasColumnType("double");

                    b.Property<int>("WeatherForecastId")
                        .HasColumnType("int");

                    b.Property<int>("WillItRain")
                        .HasColumnType("int");

                    b.Property<int>("WillItSnow")
                        .HasColumnType("int");

                    b.Property<int>("WindDegree")
                        .HasColumnType("int");

                    b.Property<string>("WindDir")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<double>("WindKph")
                        .HasColumnType("double");

                    b.Property<double>("WindMph")
                        .HasColumnType("double");

                    b.Property<double>("WindchillC")
                        .HasColumnType("double");

                    b.Property<double>("WindchillF")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("WeatherForecastId");

                    b.ToTable("Hours");
                });

            modelBuilder.Entity("WeatherForecast.DatabaseApi.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<double>("Lat")
                        .HasColumnType("double");

                    b.Property<string>("Localtime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("LocaltimeEpoch")
                        .HasColumnType("bigint");

                    b.Property<double>("Lon")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TzId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("WeatherForecast.DatabaseApi.Entities.WeatherForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("DateEpoch")
                        .HasColumnType("bigint");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId", "Date")
                        .IsUnique();

                    b.ToTable("WeatherForecasts");
                });

            modelBuilder.Entity("WeatherForecast.DatabaseApi.Entities.Astro", b =>
                {
                    b.HasOne("WeatherForecast.DatabaseApi.Entities.WeatherForecast", "WeatherForecast")
                        .WithOne("Astro")
                        .HasForeignKey("WeatherForecast.DatabaseApi.Entities.Astro", "WeatherForecastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeatherForecast");
                });

            modelBuilder.Entity("WeatherForecast.DatabaseApi.Entities.Day", b =>
                {
                    b.HasOne("WeatherForecast.DatabaseApi.Entities.WeatherForecast", "WeatherForecast")
                        .WithOne("Day")
                        .HasForeignKey("WeatherForecast.DatabaseApi.Entities.Day", "WeatherForecastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeatherForecast");
                });

            modelBuilder.Entity("WeatherForecast.DatabaseApi.Entities.Hour", b =>
                {
                    b.HasOne("WeatherForecast.DatabaseApi.Entities.WeatherForecast", "WeatherForecast")
                        .WithMany("Hours")
                        .HasForeignKey("WeatherForecastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeatherForecast");
                });

            modelBuilder.Entity("WeatherForecast.DatabaseApi.Entities.WeatherForecast", b =>
                {
                    b.HasOne("WeatherForecast.DatabaseApi.Entities.Location", "Location")
                        .WithMany("WeatherForecasts")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("WeatherForecast.DatabaseApi.Entities.Location", b =>
                {
                    b.Navigation("WeatherForecasts");
                });

            modelBuilder.Entity("WeatherForecast.DatabaseApi.Entities.WeatherForecast", b =>
                {
                    b.Navigation("Astro")
                        .IsRequired();

                    b.Navigation("Day")
                        .IsRequired();

                    b.Navigation("Hours");
                });
#pragma warning restore 612, 618
        }
    }
}
