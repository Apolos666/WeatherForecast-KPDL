// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WeatherForecast.DatabaseApi.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241023111812_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("WeatherForecast.DatabaseApi.Entities.Condition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("WeatherForecast.DatabaseApi.Entities.Current", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cloud")
                        .HasColumnType("int");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int");

                    b.Property<double>("DewpointC")
                        .HasColumnType("double");

                    b.Property<double>("DewpointF")
                        .HasColumnType("double");

                    b.Property<double>("FeelslikeC")
                        .HasColumnType("double");

                    b.Property<double>("FeelslikeF")
                        .HasColumnType("double");

                    b.Property<double>("GustKph")
                        .HasColumnType("double");

                    b.Property<double>("GustMph")
                        .HasColumnType("double");

                    b.Property<double>("HeatindexC")
                        .HasColumnType("double");

                    b.Property<double>("HeatindexF")
                        .HasColumnType("double");

                    b.Property<int>("Humidity")
                        .HasColumnType("int");

                    b.Property<int>("IsDay")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdated")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("PrecipIn")
                        .HasColumnType("double");

                    b.Property<double>("PrecipMm")
                        .HasColumnType("double");

                    b.Property<double>("PressureIn")
                        .HasColumnType("double");

                    b.Property<double>("PressureMb")
                        .HasColumnType("double");

                    b.Property<double>("TempC")
                        .HasColumnType("double");

                    b.Property<double>("TempF")
                        .HasColumnType("double");

                    b.Property<double>("Uv")
                        .HasColumnType("double");

                    b.Property<double>("VisKm")
                        .HasColumnType("double");

                    b.Property<double>("VisMiles")
                        .HasColumnType("double");

                    b.Property<int>("WindDegree")
                        .HasColumnType("int");

                    b.Property<string>("WindDir")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<double>("WindKph")
                        .HasColumnType("double");

                    b.Property<double>("WindMph")
                        .HasColumnType("double");

                    b.Property<double>("WindchillC")
                        .HasColumnType("double");

                    b.Property<double>("WindchillF")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("ConditionId");

                    b.ToTable("CurrentWeather");
                });

            modelBuilder.Entity("WeatherForecast.DatabaseApi.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Localtime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("WeatherForecast.DatabaseApi.Entities.WeatherData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrentId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentId");

                    b.HasIndex("LocationId");

                    b.ToTable("WeatherData");
                });

            modelBuilder.Entity("WeatherForecast.DatabaseApi.Entities.Current", b =>
                {
                    b.HasOne("WeatherForecast.DatabaseApi.Entities.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");
                });

            modelBuilder.Entity("WeatherForecast.DatabaseApi.Entities.WeatherData", b =>
                {
                    b.HasOne("WeatherForecast.DatabaseApi.Entities.Current", "Current")
                        .WithMany()
                        .HasForeignKey("CurrentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeatherForecast.DatabaseApi.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Current");

                    b.Navigation("Location");
                });
#pragma warning restore 612, 618
        }
    }
}
