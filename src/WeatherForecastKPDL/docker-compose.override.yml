services:
  weatherforecast.dataingestion:
    container_name: weatherforecast.dataingestion
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_HTTPS_PORTS=8081
      - DatabaseApi__BaseUrl=http://weatherforecast.databaseapi:8080
      - ConnectionStrings__Redis=${REDIS_HOST}:${REDIS_PORT},password=${REDIS_PASSWORD},user=default,ssl=true,abortConnect=false
    ports:
      - "8082:8080"
      - "8083:8081"
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro
    depends_on:
      weatherforecast.databaseapi:
        condition: service_healthy
    networks:
      - weathernet

  weatherforecast.databaseapi:
    container_name: weatherforecast.databaseapi
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - ConnectionStrings__DefaultConnection=Server=${DB_HOST};Port=${DB_PORT};Database=${DB_NAME};User Id=${DB_USER};Password=${DB_PASSWORD}
    ports:
      - "8084:8080"
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - weathernet

  zookeeper:
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    ports:
      - "2181:2181"
    networks:
      - weathernet

  kafka:
    container_name: kafka
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    networks:
      - weathernet
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:29092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  debezium:
    container_name: debezium
    environment:
      - BOOTSTRAP_SERVERS=kafka:29092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=connect_configs
      - OFFSET_STORAGE_TOPIC=connect_offsets
      - STATUS_STORAGE_TOPIC=connect_statuses
      - KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - ENABLE_DEBEZIUM_SCRIPTING="true"
    ports:
      - "8083:8083"
    depends_on:
      - kafka
      - weatherforecast.databaseapi
    networks:
      - weathernet
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  init-connector:
    container_name: init-connector
    depends_on:
      debezium:
        condition: service_healthy
      kafka:
        condition: service_healthy
    command: >
      /bin/sh -c "
      for i in {1..30}; do
        echo 'Waiting for Debezium to be ready... (Attempt '$$i')' &&
        if curl -s debezium:8083 > /dev/null; then
          echo 'Creating connector...' &&
          curl -X POST http://debezium:8083/connectors -H 'Content-Type: application/json' -d '{
            \"name\": \"weather-connector\",
            \"config\": {
              \"connector.class\": \"io.debezium.connector.mysql.MySqlConnector\",
              \"database.hostname\": \"${DB_HOST}\",
              \"database.port\": \"${DB_PORT}\",
              \"database.user\": \"${DB_USER}\",
              \"database.password\": \"${DB_PASSWORD}\",
              \"database.server.name\": \"weatherdb\",
              \"database.include.list\": \"${DB_NAME}\",
              \"database.history.kafka.bootstrap.servers\": \"kafka:29092\",
              \"database.history.kafka.topic\": \"schema-changes.weather\",
              \"include.schema.changes\": \"true\",
              \"topic.prefix\": \"weather\",
              \"database.allowPublicKeyRetrieval\": \"true\",
              \"database.ssl.mode\": \"required\"
            }
          }' &&
          exit 0
        fi
        sleep 2
      done
      echo 'Failed to connect to Debezium after 30 attempts' &&
      exit 1"
    networks:
      - weathernet
